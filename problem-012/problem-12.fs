//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

//Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.

//What is the value of the first triangle number to have over five hundred divisors?

module Problem12

let triangle n =
    let rec inner n acc = 
        match n with
            | 0 -> acc
            | _ -> inner (n-1) (acc+n)
    in inner n 0

let divisors n =
    let rec inner curr n lst =
        if curr > (float >> sqrt >> int) n then
            lst |> Seq.distinct |> Seq.sort |> Seq.toList
        else 
            match n % curr with
                | 0 -> inner (curr+1) n (curr :: (n/curr) :: lst)
                | _ -> inner (curr+1) n lst
    in inner 1 n []

let triangleWithDivisors count = 
    let rec inner n count = 
        let len = (divisors (triangle n)).Length in
            if len >= count then 
                triangle n
            else 
                inner (n+1) count
    in inner 1 count

let problem12 =
    triangleWithDivisors 500

    