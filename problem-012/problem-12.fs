//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

//Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.

//What is the value of the first triangle number to have over five hundred divisors?

module Problem12

module Problem12

let triangle n =
    [0..n] 
    |> List.sum

let divisors n =
    let upperBound = (float >> sqrt >> ceil >> int) n
    [1..upperBound]
    |> List.filter (fun x -> n % x = 0)
    |> List.collect (fun x -> [x; n/x])
    |> Seq.distinct 
    |> Seq.sort 
    |> Seq.toList

let triangleWithDivisors count =
    let rec inner n count =
        let tri = triangle n
        let len = (tri |> divisors).Length
        match len with
            | _ when len >= count -> tri
            | _ -> inner (n+1) count
    in inner 1 count
            
let problem12 =
    triangleWithDivisors 500

    